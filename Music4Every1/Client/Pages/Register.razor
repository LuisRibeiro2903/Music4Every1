@page "/register"
@inject IAuthService AuthService
@inject ILocalStorageService LocalStorage
@inject AuthenticationStateProvider AuthStateProvider
@inject NavigationManager NavigationManager


<div class="form-container" style="color:#fff;">
    <EditForm Model="user" OnSubmit="HandleRegister">
        <div class="form-box">
            <div class="input-group">
                <laber for="nome">Nome do Utilizador</laber>
                <InputText id="nome" @bind-Value="user.Nome" />
            </div>
            <div class="input-group">
                <label for="email">Endereço eletrónico</label>
                <InputText id="email" @bind-Value="user.Email" />
            </div>

            <div class="input-group">
                <label for="password">Password</label>
                <InputText id="password" @bind-Value="user.Password" type="password" />
            </div>


            <button type="submit" class="submit-btn">Register</button>
        </div>

    </EditForm>
</div>


@code {

    UserRegisterDTO user = new UserRegisterDTO();
    //private ValidationMessageStore validationMessages = new ValidationMessageStore();
    string confirm = string.Empty;
    string redirect = string.Empty;

    protected override async Task OnInitializedAsync()
    {
        redirect = await LocalStorage.GetItemAsync<string>("redirect");
        await LocalStorage.RemoveItemAsync("redirect");
    }
    async Task HandleRegister()
    {
        string path = "/";
        /*
        if (user.Password != confirm)
            {
            // Set a validation error message for the confirm password field
            validationMessages.Add("confirm", "Passwords do not match.");
            return;
        }*/
        var token = string.Empty;
        try
        {
            token = await AuthService.Register(user);
        } 
        catch (UserAlreadyExistsException e)
        {
            Console.WriteLine(e.Message);
        }
        catch (Exception e)
        {
            Console.WriteLine(e.Message);
        }

        Console.WriteLine(token);
        await LocalStorage.SetItemAsync("token", token);
        await AuthStateProvider.GetAuthenticationStateAsync();
        if (!string.IsNullOrEmpty(redirect))
        {
            path = redirect;
        }
        NavigationManager.NavigateTo(path);
    }

}
