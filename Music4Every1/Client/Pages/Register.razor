@page "/register"
@inject IAuthService AuthService
@inject ILocalStorageService LocalStorage
@inject AuthenticationStateProvider AuthStateProvider
@inject NavigationManager NavigationManager

<!-- Ainda falta meter para o utilizador colocar o seu ID(nome) e método de contacto. O CSS já inclui isso -->

<h2>Registar uma conta nova</h2>

<EditForm Model="user" OnSubmit="HandleRegister">

    <label for="user">Username</label>
    <InputText id="user" @bind-Value="user.Name" />

    <label for="email">Email</label>
    <InputText id="email" @bind-Value="user.Email" />

    <label for="password">Password</label>
    <InputText id="password" @bind-Value="user.Password" type="password" />

    <label for="confirmPassword">Confirm Password</label>
    <InputText id="confirmPassword" @bind-Value="confirm" type="password" />

    <laber for="metodoContacto"> Contact Method</laber>
    <InputText id="metodoContacto" @bind-Value="user.ContactMethod" />

    <input type="checkbox" class="checkbox"><span>Use email as contact method</span>

    <button type="submit" class="btn btn-primary">Register</button>
</EditForm>

@code {

    UserRegisterDTO user = new UserRegisterDTO();
    //private ValidationMessageStore validationMessages = new ValidationMessageStore();
    string confirm = string.Empty;
    string redirect = string.Empty;

    protected override async Task OnInitializedAsync()
    {
        redirect = await LocalStorage.GetItemAsync<string>("redirect");
        await LocalStorage.RemoveItemAsync("redirect");
    }
    async Task HandleRegister()
    {
        string path = "/";
        /*
        if (user.Password != confirm)
            {
            // Set a validation error message for the confirm password field
            validationMessages.Add("confirm", "Passwords do not match.");
            return;
        }*/
        var token = string.Empty;
        try
        {
            token = await AuthService.Register(user);
        } 
        catch (UserAlreadyExistsException e)
        {
            Console.WriteLine(e.Message);
        }
        catch (Exception e)
        {
            Console.WriteLine(e.Message);
        }

        Console.WriteLine(token);
        await LocalStorage.SetItemAsync("token", token);
        await AuthStateProvider.GetAuthenticationStateAsync();
        if (!string.IsNullOrEmpty(redirect))
        {
            path = redirect;
        }
        NavigationManager.NavigateTo(path);
    }

}
