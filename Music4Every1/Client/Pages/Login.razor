@page "/login"
@inject IAuthService AuthService
@inject ILocalStorageService LocalStorage
@inject AuthenticationStateProvider AuthStateProvider
@inject NavigationManager NavigationManager


<h3>Login</h3>
<div class="form-container">
    <EditForm Model="user" OnSubmit="HandleLogin">
        <div class="form-box">
            <div class="input-group">
                <label for="email">Endereço eletrónico</label>
                <InputText class="input-field" id="email" @bind-Value="user.Email" />
            </div>

            <div class="input-group">
                <label for="password">Password</label>
                <InputText class="input-field" id="password" @bind-Value="user.Password" type="password" />
            </div>

            <button type="submit" class="submit-btn">Login</button>
        </div>
    </EditForm>
</div>



@code {
    UserLoginDTO user = new UserLoginDTO();

    string redirect = string.Empty;

    protected override async Task OnInitializedAsync()
    {
        redirect = await LocalStorage.GetItemAsync<string>("redirect");
        await LocalStorage.RemoveItemAsync("redirect");
    }

    async Task HandleLogin()
    {
        string path = "/";
        var token = string.Empty;
        try
        {
            token = await AuthService.Login(user);
        } 
        catch (UserNotFoundException e)
        {
            Console.WriteLine(e.Message);
        }
        catch (WrongPasswordException e)
        {
            Console.WriteLine(e.Message);
        }
        catch (Exception e)
        {
            Console.WriteLine(e.Message);
        }
        Console.WriteLine(token);
        await LocalStorage.SetItemAsync("token", token);
        await LocalStorage.SetItemAsync("saldo", "10");
        await AuthStateProvider.GetAuthenticationStateAsync();
        if (!string.IsNullOrEmpty(redirect))
        {
            path = redirect;
        }
        NavigationManager.NavigateTo(path);
    }
}
